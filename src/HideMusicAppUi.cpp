/*
 * ============================================================================
 *  Name     : CHideMusicAppUi from HideMusicAppUi.cpp
 *  Part of  : HideMusic
 *  Created  : 04/04/2005 by Sergio Padrino Recio
 *  Implementation notes:
 *     Initial content was generated by Series 60 AppWizard.
 *  Version  :
 *  Copyright: No hay xD
 * ============================================================================
 */

// INCLUDE FILES
#include "HideMusicAppUi.h"
#include "HideMusicContainer.h"
#include <HideMusic.rsg>
#include "hidemusic.hrh"

#include <avkon.hrh>
#include <aknnotewrappers.h>

// ================= MEMBER FUNCTIONS =======================
//
// ----------------------------------------------------------
// CHideMusicAppUi::ConstructL()
// ?implementation_description
// ----------------------------------------------------------
//
void CHideMusicAppUi::ConstructL()
{
    BaseConstructL();
    iAppContainer = new (ELeave) CHideMusicContainer;
    iAppContainer->SetMopParent(this);
    iAppContainer->ConstructL(ClientRect());
    AddToStackL(iAppContainer);
}

// ----------------------------------------------------
// CHideMusicAppUi::~CHideMusicAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CHideMusicAppUi::~CHideMusicAppUi()
{
    if (iAppContainer)
    {
        iAvkonAppUi->RemoveFromStack((CCoeControl *)iAppContainer->iDirList);
        RemoveFromStack(iAppContainer);
        delete iAppContainer;
    }
}

// ------------------------------------------------------------------------------
// CHideMusicAppUi::::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CHideMusicAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/, CEikMenuPane * /*aMenuPane*/)
{
}

// ----------------------------------------------------
// CHideMusicAppUi::HandleKeyEventL(
//     const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
// ?implementation_description
// ----------------------------------------------------
//
TKeyResponse CHideMusicAppUi::HandleKeyEventL(
    const TKeyEvent & /*aKeyEvent*/, TEventCode /*aType*/)
{
    return EKeyWasNotConsumed;
}

// ----------------------------------------------------
// CHideMusicAppUi::HandleCommandL(TInt aCommand)
// ?implementation_description
// ----------------------------------------------------
//
void CHideMusicAppUi::HandleCommandL(TInt aCommand)
{
    switch (aCommand)
    {
    case EHideMusicCmdAppMarkAll:
        iAppContainer->MarkAllDirs();
        break;
    case EHideMusicCmdAppUnmarkAll:
        iAppContainer->UnmarkAllDirs();
        break;
    case EHideMusicCmdAppInvertSelection:
        iAppContainer->InvertSelection();
        break;
    case EHideMusicCmdAppApply:
        iAppContainer->HideUnmarkedDirs();
        break;
    case EAknSoftkeyBack:
        ProcessCommandL(EEikCmdExit);
        break;
    case EEikCmdExit:
    {
        iAppContainer->HideUnmarkedDirs();
        Exit();
        break;
    }
    case EHideMusicCmdAppAbout:
    {
        CAknInformationNote *dlgAbout;
        dlgAbout = new (ELeave) CAknInformationNote;
        dlgAbout->ExecuteLD(_L("Sergio Padrino Recio\n<<sergiou87>>\nGracias a chili_fi!!"));
        break;
    }
        // TODO: Add Your command handling code here

    default:
        break;
    }
}

// End of File
